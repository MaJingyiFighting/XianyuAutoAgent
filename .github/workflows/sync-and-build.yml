# .github/workflows/sync-and-build.yml

name: Sync Fork and Build Docker Image

on:
  # 允许手动从 Actions 标签页运行此工作流
  workflow_dispatch:

  # 定时触发：每天 UTC 00:00 (北京时间 早上 8:00)
  schedule:
    - cron: '0 0 * * *'

jobs:
  sync-build-push:
    runs-on: ubuntu-latest
    # 需要权限来推送代码和发布包（镜像）
    permissions:
      contents: write
      packages: write

    steps:
      # 1. 检出你自己的仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 获取所有历史记录，以便进行 merge
          fetch-depth: 0
          # 需要一个有写权限的 token 来推送同步后的代码
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. 同步上游仓库
      - name: Sync with upstream repository
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 添加上游仓库作为 remote
          git remote add upstream https://github.com/shaxiu/XianyuAutoAgent.git
          
          # 从上游仓库获取最新代码
          git fetch upstream
          
          # 切换到你的 main 分支
          git checkout main
          
          # 将上游的 main 分支合并到你的 main 分支
          # 如果有冲突，此步骤会失败，需要你手动解决
          git merge upstream/main
          
          # 将更新推送到你自己的仓库
          git push origin main

      # 3. 登录到 GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. 提取 Docker 镜像的元数据（如标签）
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

      # 5. 设置 QEMU 以进行多平台构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 6. 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 7. 构建并推送多平台 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # 指定要构建的平台
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}